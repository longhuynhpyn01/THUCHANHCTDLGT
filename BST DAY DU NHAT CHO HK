#include <iostream>
using namespace std;

struct Node
{
    int key;
    Node* left;
    Node* right;
    int height;
};

int max(int a, int b);

int height(Node* N)
{
    if (N == NULL)
        return 0;
    return N->height;
}

int max(int a, int b)
{
    return (a > b) ? a : b;
}

Node* newNode(int key)
{
    Node* node = new Node();
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1;

    return(node);
}

Node* insert(Node* node, int key)
{
    if (node == NULL)
        return(newNode(key));

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else 
        return node;

    node->height = 1 + max(height(node->left),
        height(node->right));

    return node;
}

Node* minValueNode(Node* node)
{
    Node* current = node;

    while (current->left != NULL)
        current = current->left;

    return current;
}

Node* deleteNode(Node* root, int key)
{

    if (root == NULL)
        return root;

    if (key < root->key)
        root->left = deleteNode(root->left, key);

    else if (key > root->key)
        root->right = deleteNode(root->right, key);

    else
    {
        if ((root->left == NULL) ||
            (root->right == NULL))
        {
            Node* temp = root->left ?
                root->left :
                root->right;

            // No child case  
            if (temp == NULL)
            {
                temp = root;
                root = NULL;
            }
            else // One child case  
                *root = *temp; // Copy the contents of  
                               // the non-empty child  
            free(temp);
        }
        else
        {
            // node with two children: Get the inorder  
            // successor (smallest in the right subtree)  
            Node* temp = minValueNode(root->right);

            // Copy the inorder successor's  
            // data to this node  
            root->key = temp->key;

            // Delete the inorder successor  
            root->right = deleteNode(root->right,
                temp->key);
        }
    }
  
    if (root == NULL)
        return root;

    root->height = 1 + max(height(root->left),
        height(root->right));
    return root;
}

void preOrder(Node* root)
{
    if (root != NULL)
    {
        cout << root->key << " ";
        preOrder(root->left);
        preOrder(root->right);
    }
}
void RemoveAll(Node*& root)
{
    if (root != NULL) {
        RemoveAll(root->left);
        RemoveAll(root->right);
        delete root;
    }
}
int CountNode(Node* pNode)
{
    if (pNode == NULL)
        return 0;
    else
        return 1 + CountNode(pNode->left) + CountNode(pNode->right);
}
void countLeafNode(Node* node, int& count) {
    if (node != NULL)
    {
        countLeafNode(node->left, count);
        if (node->left == NULL && node->right == NULL)
            count++;
        countLeafNode(node->right, count);
    }
}
int sumTree(Node* Tree)
{
    if (Tree != NULL)
    {
        int a = sumTree(Tree->left);
        int b = sumTree(Tree->right);
        return Tree->key + a + b;
    }
    return 0;
}

int MaxNode(Node* Tree) {
    if (Tree->right == NULL)
        return Tree->key;
    else
        return MaxNode(Tree->right);
}

int MinNode(Node* Tree) {
    if (Tree->left == NULL)
        return Tree->key;
    else
        return MinNode(Tree->left);
}
Node* Search(Node* pRoot, int x)
{
    if (pRoot == NULL)
        return NULL;
    if (x < pRoot->key)
        Search(pRoot->left, x);
    else
    {
        if (x > pRoot->key)
            Search(pRoot->right, x);
        else
        {
            return pRoot;
        }
    }
}
void Traverse(Node* t)
{
    if (t != NULL)
    {
        Traverse(t->left);
        printf("Khoa: %d, chieu cao: %d\n", t->key, t->height);
        Traverse(t->right);
    }
}
void NLR(Node* root) {//duyet NLR
    if (root != NULL) {
        cout << root->key << " ";
        NLR(root->left);
        NLR(root->right);
    }
}
void LNR(Node* root) {//duyet LNR
    if (root != NULL) {
        LNR(root->left);
        cout << root->key << " ";
        LNR(root->right);
    }
}
void LRN(Node* root) {//duyet LRN
    if (root != NULL) {
        LRN(root->left);
        LRN(root->right);
        cout << root->key << " ";
    }
}
int main()
{
    Node* root = NULL, *p;
    /*
    root = insert(root, 9);
    root = insert(root, 5);
    root = insert(root, 10);
    root = insert(root, 0);
    root = insert(root, 6);
    root = insert(root, 11);
    root = insert(root, -1);
    root = insert(root, 1);
    root = insert(root, 2);

    /* The constructed AVL Tree would be
                     9
                    / \
                   5  10
                  / \   \
                 0   6   11
                / \  
              -1   1
                  /
                 2
    */

   /* cout << "Preorder traversal of the "
        "constructed AVL tree is \n";
    preOrder(root);
    cout << endl;
    Traverse(root);
    root = deleteNode(root, 5);

    /* The AVL Tree after deletion of 10
                     9
                    / \
                   5  11
                  / \   
                 0   6  
                / \  
              -1   1
                  /
                 2
    */

  /*  cout << "\nPreorder traversal after"
        << " deletion of 10 \n";
    preOrder(root);
    cout << endl;
    Traverse(root);
    RemoveAll(root);
*/
    //test
    int Data;
    do
    {
        cout << "Nhap vao du lieu, -1 de ket thuc: ";
        cin >> Data;
        if (Data == -1)
            break;
        root = insert(root, Data);
    } while (Data != -1);
    cout << "\nCay BST vua tao: \n";
    Traverse(root);
    int x;
    cout << "\nNhap vao 1 gia tri de tim: ";
    cin >> x;
    p = Search(root, x);
    if (p != NULL)
    {
        cout << x << " co xuat hien trong cay.\n";;
    }
    else
        cout << x << " khong co trong cay.\n";
    cout << "\nTong gia tri cac node: " << sumTree(root);
    cout << "\nMin Node trong cay: " << MinNode(root);
    cout << "\nMax Node trong cay: " << MaxNode(root);
    cout << "\nSo luong cac nut cua cay nhi phan la " << CountNode(root);
    int count = 0;
    countLeafNode(root, count);
    cout << "\nSo luong cac nut la cua cay nhi phan la " << count << endl;
    cout << "\nDuyet theo thu tu truoc: ";
    NLR(root);
    cout << "\nDuyet theo thu tu giua: ";
    LNR(root);
    cout << "\nDuyet theo thu tu sau: ";
    LRN(root);
    RemoveAll(root);

    return 0;
}
