ï»¿#include<iostream> 
#include <ctime>
using namespace std;

int dem1 = 0, dem2 = 0, dem3 = 0, dem4 = 0;

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}


void selectionSort(int* arr, int n)
{
    int min;
    for (int i = 0; i < n - 1; i++) {
        min = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min]) {
                min = j;
            }
        }

        if (min != i) {
            swap(&arr[min], &arr[i]);
        }
    }
}
void selectionSort1(int* arr, int n)
{
    int min;
    for (int i = 0; i < n - 1; i++) {
        min = i;
        dem3++;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min]) {
                min = j;
                dem3++; dem4++;
            }
            dem4++;
        }

        if (min != i) {
            swap(&arr[min], &arr[i]);
            dem3 += 3;
            dem4++;
        }
        dem4++;
    }
}
void quickSort1(int* arr, int low, int high)
{
    if (low < high)
    {
        dem2++;
        int i = low, j = high;
        dem1 += 2;
        int pivot = arr[low];
        dem1++;
        do {
            while (arr[i] < pivot) {
                ++i;
                dem2++;
            } dem2++;
            while (arr[j] > pivot) {
                --j;
                dem2++;
            } dem2++;
            if (i <= j) {
                swap(&arr[i], &arr[j]);
                ++i; --j;
                dem1 += 3; dem2++;
            } dem2++;
            dem2++;
        } while (i < j);

        quickSort1(arr, low, j);
        quickSort1(arr, i, high);
    }
    dem2++;
}
void quickSort(int* arr, int low, int high)
{
    if (low < high)
    {
        int i = low, j = high;
        int pivot = arr[low];
        do {
            while (arr[i] < pivot) ++i;
            while (arr[j] > pivot) --j;
            if (i <= j) {
                swap(&arr[i], &arr[j]);
                ++i; --j;
            }
        } while (i < j);

        quickSort(arr, low, j);
        quickSort(arr, i, high);
    }
}
void quickSortMid(int* arr, int low, int high)
{
    if (low < high)
    {
        int i = low, j = high;
        int pivot = arr[(low + high) / 2];
        do {
            while (arr[i] < pivot) ++i;
            while (arr[j] > pivot) --j;
            if (i <= j) {
                swap(&arr[i], &arr[j]);
                ++i; --j;
            }
        } while (i < j);

        quickSortMid(arr, low, j);
        quickSortMid(arr, i, high);
    }
}
void printArray(int arr[], int size)
{
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
}
void bai1()
{
    int n;

    cout << "Moi ban nhap n: ";
    cin >> n;

    int* a = new int[n];
    int* b = new int[n];
    clock_t start, finish;
    double duration1, duration2;

    for (int i = 0; i < n; i++)
    {
        cout << "Nhap so thu " << i + 1 << ": ";
        cin >> a[i];
        b[i] = a[i];
    }

    start = clock();
    cout << "\nstart = " << start << endl;
    quickSort1(a, 0, n - 1);
    finish = clock();
    cout << "\nfinish = " << finish << endl;
    duration1 = ((double)finish - (double)start) / CLOCKS_PER_SEC;
    cout << "\nThoi gian thuc hien Quick Sort: " << duration1 << " giay\n";
    cout << "\nSo phep gan la: " << dem1 << endl;
    cout << "\nSo phep so sanh la: " << dem2 << endl;


    start = clock();
    cout << "\nstart = " << start << endl;
    selectionSort1(b, n);
    finish = clock();
    cout << "\nfinish = " << finish << endl;
    duration2 = ((double)finish - (double)start) / CLOCKS_PER_SEC;
    cout << "\nThoi gian thuc hien Selection Sort: " << duration2 << " giay\n";
    cout << "\nSo phep gan la: " << dem3 << endl;
    cout << "\nSo phep so sanh la: " << dem4 << endl;

    delete[]a;
    delete[]b;
}
void bai2()
{
    int n;
    cout << "Moi ban nhap n: ";
    cin >> n;
    int* a = new int[n];
    int* b = new int[n];
    clock_t start, finish;
    double duration;
    for (int i = 0; i < n; i++)
    {
        cout << "Nhap so thu " << i + 1 << ": ";
        cin >> a[i];
        b[i] = a[i];
    }

    start = clock();
    cout << "start = " << start << endl;
    quickSort(a, 0, n - 1);
    finish = clock();
    cout << "finish = " << finish << endl;
    duration = ((double)finish - (double)start) / CLOCKS_PER_SEC;
    cout << "Thoi gian thuc hien quickSortHead: " << duration << " giay\n";

    start = clock();
    cout << "start = " << start << endl;
    quickSortMid(a, 0, n - 1);
    finish = clock();
    cout << "finish = " << finish << endl;
    duration = ((double)finish - (double)start) / CLOCKS_PER_SEC;
    cout << "Thoi gian thuc hien quickSortMid: " << duration << " giay\n";
    delete[]a;
    delete[]b;
}
void selection3(int a[], int n)
{
    int min, max;
    for (int i = 0; i < n - 1; i++)
    {
        if (a[i] % 2 == 0)
        {
            max = i;
            for (int j = i + 1; j < n; j++)
            {
                if (a[j] % 2 == 0 && a[j] > a[i])
                    max = j;
            }

            if (i != max)
                swap(&a[i], &a[max]);
        }

        if (a[i] % 2 != 0)
        {
            min = i;
            for (int j = i + 1; j < n; j++)
            {
                if (a[j] % 2 != 0 && a[j] < a[i])
                    min = j;
            }

            if (i != min)
                swap(&a[i], &a[min]);
        }
    }

}

void bai3()
{
    int n;
    cout << "Moi ban nhap n: ";
    cin >> n;
    int* a = new int[n];
    int* b = new int[n];

    for (int i = 0; i < n; i++)
    {
        cout << "Nhap so thu " << i + 1 << ": ";
        cin >> a[i];
        b[i] = a[i];
    }
    selection3(a, n);
    cout << "\nMang sau khi dung Selection Sort sap xep: ";
    printArray(a, n);

    delete[]a;
    delete[]b;
}
struct Node {
    int data;
    Node* next;
};

struct List {
    Node* head;
    Node* tail;
};

void Init(List& l) { // khoi tao List rong
    l.head = l.tail = NULL;
}

Node* createNode(int k)
{
    Node* p = new Node;
    if (p == NULL)
    {
        cout << "Khong du bo nho";
        exit(0);
    }
    p->data = k;
    p->next = NULL;
    return p;
}

int length(List l)
{
    Node* pNode = l.head;
    int count = 0;
    while (pNode != NULL)
    {
        count++;
        pNode = pNode->next;
    }
    return count;
}

void PrintList(List l) {
    Node* p;
    if (l.head == NULL)
    {
        cout << "Danh sach rong";
        exit(0);
    }
    p = l.head;
    while (p != NULL) {
        cout << p->data << " ";
        p = p->next;
    }
    cout << endl;
}
void RemoveAll(List& l)
{
    Node* p;
    while (l.head != NULL)
    {
        p = l.head;
        l.head = l.head->next;
        delete p;
    }
    l.head = NULL;
}

// ham chen vao dau List:
void addHead(List& l, int x)
{
    Node* p = createNode(x);
    if (l.head == NULL)
    {
        l.head = l.tail = p;
    }
    else
    {
        p->next = l.head;
        l.head = p;
    }
}
// ham chen vao cuoi List
void addTail(List& l, int x) {
    Node* p = createNode(x);
    if (l.head == NULL)
    {
        l.head = l.tail = p;
    }
    else {
        l.tail->next = p;
        l.tail = p;
    }
}
// ham chen vao truoc node
void insertBefore(Node* q, int k)
{
    Node* p = new Node;
    if (p == NULL)
    {
        cout << "Loi khong du bo nho\n";
        exit(0);
    }
    *p = *q;
    q->next = p;
    q->data = k;
}

void insertAt(List& l, int pos, int k)
{
    int n, i;
    Node* q;
    n = length(l);
    if ((pos < 0) || (pos > n))
    {
        cout << "Vi tri chen khong phu hop\n";
        return;
    }
    if (pos == 0)
        addHead(l, k);
    else
    {
        if (pos == n)
            addTail(l, k);
        else
        {
            for (i = 0, q = l.head; i < pos; i++, q = q->next);
            insertBefore(q, k);
            if (l.tail->next)
                l.tail = l.tail->next;
        }
    }
}

void delHead(List& l)
{
    Node* q;
    if (l.head == l.tail) {
        delete l.head;
        l.head = l.tail = NULL;
    }
    else
    {
        q = l.head;
        l.head = l.head->next;
        delete q;
    }
}

void delTail(List& l)
{
    Node* q;
    if (l.head == l.tail)
    {
        delete l.head;
        l.head = l.tail = NULL;
    }
    else
    {
        for (q = l.head; q->next != l.tail; q = q->next);
        delete l.tail;
        l.tail = q;
        q->next = NULL;
    }
}

void delMid(Node* q)
{
    Node* r;
    r = q->next;
    *q = *r;
    delete r;
}
void deleteAt(List& l, int pos)
{
    int n, i;
    Node* q;
    n = length(l);
    if ((pos < 0) || (pos >= n))
    {
        cout << "Vi tri xoa khong phu hop\n";
        return;
    }
    if (pos == 0)
        delHead(l);
    else
    {
        if (pos == n - 1)
            delTail(l);
        else
        {
            for (i = 0, q = l.head; i < pos; i++, q = q->next);
            if (q->next == l.tail)
                l.tail = q;
            delMid(q);
        }
    }
}

void QuickSort(List& l)
{
    List l1, l2;
    Node* tag, * p;
    if (l.head == l.tail)
        return;
    Init(l1);
    Init(l2);
    tag = l.head;
    l.head = l.head->next; // cap nhat lai l.head
    tag->next = NULL;// co lap tag
    while (l.head != NULL) {
        p = l.head;
        l.head = l.head->next;
        p->next = NULL;
        if (p->data <= tag->data)
            addHead(l1, p->data);
        else
            addHead(l2, p->data);
    }
    QuickSort(l1);
    QuickSort(l2);
    if (l1.head != NULL)
    {
        l.head = l1.head;
        l1.tail->next = tag;
    }
    else
        l.head = tag;

    tag->next = l2.head;

    if (l2.head != NULL)
        l.tail = l2.tail;
    else
        l.tail = tag;
}
void Swap(int& a, int& b)
{
    int c = a;
    a = b;
    b = c;
}
void SelectionSort(List& l)
{
    Node* p, * q, * min;
    for (p = l.head; p->next != NULL; p = p->next)
    {
        min = p;
        for (q = p->next; q; q = q->next)
        {
            if (q->data < min->data)
                min = q;
        }
        if (min != p)
            swap(p->data, min->data);
    }
}

void bai4()
{
    List l;
    Init(l);

    int k, a;
    while (1)
    {
        cout << "\n\t\t\t==================MENU================\t\t\t\n";
        cout << "\n1.Them phan tu vao danh sach";
        cout << "\n2.Them phan tu vao cuoi danh sach";
        cout << "\n3.Xuat danh sach cac so nguyen";
        cout << "\n4.Chen mot so tai vi tri xac dinh trong danh sach";
        cout << "\n5.Xoa mot so tai vi tri xac dinh trong danh sach";
        cout << "\n6.Sap xep tang dan danh sach lien ket bang Quick Sort";
        cout << "\n7.Sap xep tang dan danh sach lien ket bang Selection Sort";
        cout << "\n8.Huy toan bo danh sach lien ket";
        cout << "\n\n\t\t\t==================END================\t\t\t\n";
        cout << "\nNhap lua chon cua ban: ";
        cin >> k;
        switch (k)
        {
        case 1:
            while (1)
            {
                cout << "Nhap so can them (nhap so 0 de thoat): ";
                cin >> a;
                if (a == 0)
                    break;
                addHead(l, a);
            }
            break;
        case 2:
            while (1)
            {
                cout << "Nhap so can them (nhap so 0 de thoat): ";
                cin >> a;
                if (a == 0)
                    break;
                addTail(l, a);
            }
            break;
        case 3:
            cout << "Du lieu danh sach lien ket la: ";
            PrintList(l);
            break;
        case 4:
            cout << "Nhap so can them : ";
            cin >> a;
            cout << "Nhap vi tri can them: ";
            cin >> k;
            insertAt(l, k, a);
            break;
        case 5:
            cout << "Nhap vi tri can xoa: ";
            cin >> k;
            deleteAt(l, k);
            break;
        case 6:
            cout << "Danh sach lien ket sau khi sap xep la: ";
            QuickSort(l);
            PrintList(l);
            break;
        case 7:
            cout << "Danh sach lien ket sau khi sap xep la: ";
            SelectionSort(l);
            PrintList(l);
            break;
        case 8:
            RemoveAll(l);
            break;
        default:
            exit(0); break;
        }
        system("pause");
        system("cls");
    }
    RemoveAll(l);
}

int main()
{
    cout << "BAI 1: \n";
    bai1();
    cout << "\nBAI 2: \n";
    bai2();
    cout << "\nBAI 3: \n";
    bai3();
    cout << "\nBAI 4: \n";
    bai4();

    return 0;
}
