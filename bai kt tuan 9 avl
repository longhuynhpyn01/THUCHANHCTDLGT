#include <iostream>
using namespace std;

struct AVLNODE
{
	int Key;
	int bal; // thuộc tính cho biết giá trị cân bằng
	// 0: cân bằng, 1: lệch trái, 2: lệch phải
	AVLNODE* pLeft;
	AVLNODE* pRight;
};
AVLNODE* CreateNode(int Data)
{
	AVLNODE* pNode;
	pNode = new AVLNODE; //Xin cấp phát bộ nhớ động để tạo một phần tử (node) mới
	if (pNode == NULL) 
	{
		return NULL;
	}
	pNode->Key = Data;
	pNode->pLeft = NULL;
	pNode->pRight = NULL;
	pNode->bal = 0; // thuoc tinh cho biet node co gia tri can bang, nghia la 
	//chieu cao cua cay con ben trai bang cay con ben phai
	return pNode;
}
void LeftRotate(AVLNODE*& P)
{
	AVLNODE* Q;
	Q = P->pRight;
	P->pRight = Q->pLeft;
	Q->pLeft = P;
	P = Q;
}
void RightRotate(AVLNODE*& P)
{
	AVLNODE* Q;
	Q = P->pLeft;
	P->pLeft = Q->pRight;
	Q->pRight = P;
	P = Q;
}
void LeftBalance(AVLNODE*& P)
{
	switch (P->pLeft->bal)
	{
	case 1: //mất cân bằng trái trái
		RightRotate(P);
		P->bal = 0;
		P->pRight->bal = 0;
		break;
	case 2: // mất cân bằng trái phải
		LeftRotate(P->pLeft);
		RightRotate(P);
		switch (P->bal) 
		{
		case 0:
			P->pLeft->bal = 0;
			P->pRight->bal = 0;
			break;
		case 1:
			P->pLeft->bal = 0;
			P->pRight->bal = 2;
			break;
		case 2:
			P->pLeft->bal = 1;
			P->pRight->bal = 0;
			break;
		}
		P->bal = 0;
		break;
	}
}
void RightBalance(AVLNODE*& P)
{
	switch (P->pRight->bal) 
	{
	case 1: // mất cân bằng phải trái
		RightRotate(P->pRight);
		LeftRotate(P);
		switch (P->bal) {
		case 0:
			P->pLeft->bal = 0;
			P->pRight->bal = 0;
			break;
		case 1:
			P->pLeft->bal = 1;
			P->pRight->bal = 0;
			break;
		case 2:
			P->pLeft->bal = 0;
			P->pRight->bal = 2;
			break;
		}
		P->bal = 0;
		break;
	case 2: //mất cân bằng phải phải
		LeftRotate(P);
		P->bal = 0;
		P->pLeft->bal = 0;
		break;
	}
}
int InsertNode(AVLNODE*& tree, int x)
{
	int res;
	if (tree == NULL) { //Nếu vị trí hiện tại rỗng thì thêm giá trị x tại node đó
		tree = CreateNode(x);
		if (tree == NULL) {
			return -1; //thêm ko thành công vì thiếu bộ nhớ
		}
		return 2;//thêm thành công và làm tăng chiều cao cây
	}
	else {
		if (tree->Key == x) {
			return 0; //khóa này đã tồn tại trong cây
		}
		else if (tree->Key > x) {
			res = InsertNode(tree->pLeft, x);
			if (res < 2) {
				return res;
			}
			switch (tree->bal)
			{ //giá trị cân bằng hiện tại của tree

			case 0:
				tree->bal = 1;
				return 2;
			case 1:
				LeftBalance(tree);
				return 1;
			case 2:
				tree->bal = 0;
				return 1;
			}
		}
		else {
			res = InsertNode(tree->pRight, x);
			if (res < 2) {
				return res;
			}
			switch (tree->bal) {
			case 0:
				tree->bal = 2;
				return 2;
			case 1:
				tree->bal = 0;
				return 1;
			case 2:
				RightBalance(tree);
				return 1;
			}
		}
	}
}
void Traverse(AVLNODE* t)
{
	if (t != NULL)
	{
		Traverse(t->pLeft);
		printf("Khoa: %d, can bang: %d\n", t->Key, t->bal);
		Traverse(t->pRight);
	}
}
void RemoveAll(AVLNODE*& t)
{
	if (t != NULL) {
		RemoveAll(t->pLeft);
		RemoveAll(t->pRight);
		delete t;
	}
}
int CountNode(AVLNODE* pNode)
{
	if (pNode == NULL)
		return 0;
	else
		return 1 + CountNode(pNode->pLeft) + CountNode(pNode->pRight);
}
void countLeafNode(AVLNODE* node, int& count) {
	if (node != NULL)
	{
		countLeafNode(node->pLeft, count);
		if (node->pLeft == NULL && node->pRight == NULL)
			count++;
		countLeafNode(node->pRight, count);
	}
}
int sumTree(AVLNODE* Tree)
{
	if (Tree != NULL)
	{
		int a = sumTree(Tree->pLeft);
		int b = sumTree(Tree->pRight);
		return Tree->Key + a + b;
	}
	return 0;
}

int MaxNode(AVLNODE* Tree) {
	if (Tree->pRight == NULL)
		return Tree->Key;
	else
		return MaxNode(Tree->pRight);
}

int MinNode(AVLNODE* Tree) {
	if (Tree->pLeft == NULL)
		return Tree->Key;
	else
		return MinNode(Tree->pLeft);
}
AVLNODE* Search(AVLNODE* pRoot, int x)
{
	if (pRoot == NULL)
		return NULL;
	if (x < pRoot->Key)
		Search(pRoot->pLeft, x);
	else
	{
		if (x > pRoot->Key)
			Search(pRoot->pRight, x);
		else
		{
			return pRoot;
		}
	}
}
void NLR(AVLNODE* root) {//duyet NLR
	if (root != NULL) {
		cout << root->Key << " ";
		NLR(root->pLeft);
		NLR(root->pRight);
	}
}
void LNR(AVLNODE* root) {//duyet LNR
	if (root != NULL) {
		LNR(root->pLeft);
		cout << root->Key << " ";
		LNR(root->pRight);
	}
}
void LRN(AVLNODE* root) {//duyet LRN
	if (root != NULL) {
		LRN(root->pLeft);
		LRN(root->pRight);
		cout << root->Key << " ";
	}
}

int main()
{
	AVLNODE* tree, *p;
	//Khởi tạo cây. Phép gán con trỏ bằng NULL để đảm bảo nó trỏ về 0. 
	//Ta sẽ dễ quản lý hơn là khi con trỏ trỏ về một vùng nào đó mình không biết
	tree = NULL;
	int Data;
	do
	{
		cout << "Nhap vao du lieu, -1 de ket thuc: ";
		cin >> Data;
		if (Data == -1)
			break;
		InsertNode(tree, Data);
	} while (Data != -1);
	cout << "\nCay AVL vua tao: \n";
	Traverse(tree);
	int x;
	cout << "\nNhap vao 1 gia tri de tim: ";
	cin >> x;
	p = Search(tree, x);
	if (p != NULL)
	{
		cout << x << " co xuat hien trong cay.\n";;
	}
	else
		cout << x << " khong co trong cay.\n";
	cout << "\nTong gia tri cac node: " << sumTree(tree);
	cout << "\nMin Node trong cay: " << MinNode(tree);
	cout << "\nMax Node trong cay: " << MaxNode(tree);
	cout << "\nSo luong cac nut cua cay nhi phan la " << CountNode(tree);
	int count = 0;
	countLeafNode(tree, count);
	cout << "\nSo luong cac nut la cua cay nhi phan la " << count << endl;
	cout << "\nDuyet theo thu tu truoc: ";
	NLR(tree);
	cout << "\nDuyet theo thu tu giua: ";
	LNR(tree);
	cout << "\nDuyet theo thu tu sau: ";
	LRN(tree);
	RemoveAll(tree);
	return 0;
}

/*CAU 2. Cho biết kết quả in ra màn hình khi người dùng nhập vào các dữ liệu sau :
-1 
=> Cay AVL vua tao:
(Cay AVL rong)

10 30 35 32 20 8 - 1 
=> Cay AVL vua tao:
Khoa: 8, can bang: 0
Khoa: 10, can bang: 0
Khoa: 20, can bang: 0
Khoa: 30, can bang: 0
Khoa: 32, can bang: 0
Khoa: 35, can bang: 1

30 40 50 - 10 - 5 - 1 
=> Cay AVL vua tao:
Khoa: -10, can bang: 0
Khoa: -5, can bang: 0
Khoa: 30, can bang: 0
Khoa: 40, can bang: 1
Khoa: 50, can bang: 0

*/

/*
CAU 3. Nhận xét trình tự các node được xuất ra màn hình? Giải thích tại sao lại 
in ra được trình tự như nhận xét?
=> Trinh tu cac node duoc xuat ra man hinh la duyet theo thu tu giua (LNR).
=> In ra duoc trinh tu nhan xet vi duyet LNR theo thu tu Left -> Node -> Right, cu the nhu sau:
		+ goi de qui duyet qua cay con ben trai
		+ Ghe tham node root
		+ goi de qui duyet qua cay con ben phai
*/

/*
CAU 4. Sinh viên hoàn tất hàm RightRotate trong source code.
=> Em da lam cau nay o tren (dong 35)

CAU 5. Biên dịch lại chương trình sau khi hoàn thành câu 3 và cho biết kết quả in ra 
màn hình khi người dùng nhập vào các dữ liệu sau:
50 20 30 10 -5 7 15 35 57 65 55 -1
=> -5 7 10 15 20 30 35 50 55 57 65

CAU 6. Vẽ hình cây AVL được tạo ra từ phần nhập liệu ở câu 5.
					 30
				  /     \
				 10      50
			    /  \    /   \
			  -5   20  35   57
			    \  /       /  \
				7 15     55   65

CAU 7. Hãy ghi chú các thông tin bằng cách trả lời các câu hỏi ứng với các dòng lệnh
có yêu cầu ghi chú (//Ghi chú) trong các hàm InsertNode, BalanceLeft, BalanceRight, _tmain.
=>Em da lam o ben tren !!!

CAU 8. Sinh viên cài đặt lại các hàm dùng cho cây nhị phân và cây NPTK để áp dụng cho cây AVL.
=> Em da cai dat cai ham la CountNode, CountLeafNode, sumTree, MaxNode, MinNode, NLR, LNR, LRN

*/
